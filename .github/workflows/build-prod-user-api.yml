name: "운영환경 - 빌드 - User API"

on:
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check assigned tag
        uses: actions/github-script@v6
        if: ${{GITHUB.REF_TYPE != 'tag'}}
        with:
          script: core.setFailed('You should deploy with tag (not branch !)')

      - name: validate semantic versioning
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                      echo 'version "${{ github.event.inputs.version }}" not in semantic versioning format ex) v0.0.1'
                      exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs:
      - validate
    environment: prod-user
    steps:
      - name: checkout@v3
        uses: actions/checkout@v3

      - name: Version
        id: version
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "::set-output name=version::${VERSION}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build User Nginx Image
        run: |
          docker build -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG -f ./threedollar-api-user-service/nginx/Dockerfile ./threedollar-api-user-service/nginx
          docker tag $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest
          docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
          docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest

          echo "🐇 Build User Nginx Image >> ${DOCKER_REPOSITORY}:${IMAGE_TAG}"
        env:
          DOCKER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DOCKER_REPOSITORY: threedollars-in-my-pocket-user-nginx-prod
          IMAGE_TAG: ${{ steps.version.outputs.version }}

      - name: Build User API Image
        run: |
          ./gradlew clean ci :threedollar-api-user-service:jib -Dimage=${DOCKER_REGISTRY}/${DOCKER_REPOSITORY} -Dtag=${IMAGE_TAG} --warn

          echo "🐇 Build User API Image >> ${DOCKER_REPOSITORY}:${IMAGE_TAG}"
        env:
          DOCKER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DOCKER_REPOSITORY: threedollars-in-my-pocket-user-api-prod
          IMAGE_TAG: ${{ steps.version.outputs.version }}
