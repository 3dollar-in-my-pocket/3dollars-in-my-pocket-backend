name: 운영환경 API 서버 배포

on:
  push:
    branches:
      - main
      - feature/189
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout@v2
        uses: actions/checkout@v2

      - name: Create application-rds.properties
        env:
          PROFILES: prod
          DB_URI: ${{secrets.JDBC_URI_PROD}}
          DB_USERNAME: ${{secrets.DB_USERNAME_PROD}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD_PROD}}
          DB_DRIVER: org.mariadb.jdbc.Driver

          RESOURCE_PWD: threedollar-domain/src/main/resources
        run: |
          echo -e "spring.config.activate.on-profile=$PROFILES\nspring.datasource.hikari.jdbc-url=$DB_URI\nspring.datasource.hikari.username=$DB_USERNAME\nspring.datasource.hikari.password=$DB_PASSWORD\nspring.datasource.hikari.driver-class-name=$DB_DRIVER" > $RESOURCE_PWD/application-rds.properties

      - name: Create application-thirdparty.yml
        env:
          APPLE_CLIENT_ID: ${{secrets.APPLE_CLIENT_ID}}
          APPLE_ISSUER: ${{secrets.APPLE_ISSUER}}

          RESOURCE_PWD: threedollar-external/src/main/resources
        run: |
          echo -e "apple.client_id=$APPLE_CLIENT_ID\napple.issuer=$APPLE_ISSUER" > $RESOURCE_PWD/application-thirdparty.properties

      - name: Create application-sentry.properties
        env:
          SENTRY_DSN: ${{secrets.SENTRY_DSN}}

          RESOURCE_PWD: threedollar-api/src/main/resources
        run: |
          echo -e "sentry.dsn=$SENTRY_DSN" > $RESOURCE_PWD/application-sentry.properties

      - name: Create application-security.properties
        env:
          USER_NAME: ${{secrets.SECURITY_USER_NAME}}
          USER_PASSWORD: ${{secrets.SECURITY_USER_PASSWORD}}

          RESOURCE_PWD: threedollar-api/src/main/resources
          ADMIN_RESOURCE_PWD: threedollar-admin/src/main/resources
        run: |
          echo -e "spring.security.user.name=$USER_NAME\nspring.security.user.password=$USER_PASSWORD" > $RESOURCE_PWD/application-security.properties
          echo -e "spring.security.user.name=$USER_NAME\nspring.security.user.password=$USER_PASSWORD" > $ADMIN_RESOURCE_PWD/application-security.properties

      - name: Create application-slack.properties
        env:
          PROFILES: prod
          SLACK_TOKEN: ${{secrets.SLACK_TOKEN_PROD}}

          RESOURCE_PWD: threedollar-external/src/main/resources
        run: |
          echo -e "spring.config.activate.on-profile=$PROFILES\nslack.token=$SLACK_TOKEN" > $RESOURCE_PWD/application-slack.properties

      - name: Version
        id: version
        run: |
          VERSION=`cat ./version.txt`
          GIT_COMMIT_MSG=`git show -s`
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=git-commit-msg::$GIT_COMMIT_MSG"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build API
        id: build
        env:
          DOCKER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DOCKER_REPOSITORY: 3dollar-api
          IMAGE_TAG: ${{ steps.version.outputs.version }}
        run: |
          docker build -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .
          docker tag $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest
          docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
          docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest
          echo "::set-output name=image::$DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        id: download-task-definition
        run: |
          aws ecs describe-task-definition --task-definition threedollar-api-prod --query taskDefinition > task-definition-prod.json
          echo "::set-output name=task-definition::$GITHUB_WORKSPACE/task-definition-prod.json"

      - name: Update Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.download-task-definition.outputs.task-definition }}
          container-name: threedollar-api-prod
          image: ${{ steps.build.outputs.image }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          cluster: threedollar-prod
          service: threedollar-api-prod
          wait-for-service-stability: true

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.version.outputs.git-commit-msg }}
          draft: false
          prerelease: false
