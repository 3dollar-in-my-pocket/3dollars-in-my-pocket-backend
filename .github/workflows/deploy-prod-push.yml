name: 운영환경 - 배포 - Push

on:
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check assigned tag
        uses: actions/github-script@v6
        if: ${{GITHUB.REF_TYPE != 'tag'}}
        with:
          script: core.setFailed('You should deploy with tag (not branch !)')

      - name: validate semantic versioning
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                      echo 'version "${{ github.event.inputs.version }}" not in semantic versioning format ex) v0.0.1'
                      exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs:
      - validate
    environment: prod-push
    steps:
      - name: checkout@v3
        uses: actions/checkout@v3

      - name: Version
        id: version
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "::set-output name=version::${VERSION}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Create firebase-boss.json
        id: create-json-boss
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "firebase-boss.json"
          json: ${{ secrets.PROD_BOSS_FIREBASE_JSON }}
          dir: "threedollar-push/src/main/resources/"

      - name: Create firebase-user.json
        id: create-json-user
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "firebase-user.json"
          json: ${{ secrets.PROD_USER_FIREBASE_JSON }}
          dir: "threedollar-push/src/main/resources/"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build & Push Push Image
        id: build
        run: |
          ./gradlew clean ci :threedollar-push:jib -Dimage=${DOCKER_REGISTRY}/${DOCKER_REPOSITORY} -Dtag=${IMAGE_TAG}

          echo "::set-output name=image::${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}:${IMAGE_TAG}"
          echo "🐇 Build Image >> ${DOCKER_REPOSITORY}:${IMAGE_TAG}"
        env:
          DOCKER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DOCKER_REPOSITORY: threedollars-in-my-pocket-push-prod
          IMAGE_TAG: ${{ steps.version.outputs.version }}

      - name: Download task definition
        id: download-task-definition
        run: |
          aws ecs describe-task-definition --task-definition threedollars-in-my-pocket-push-prod --query taskDefinition > task-definition-push.json
          echo "::set-output name=task-definition::$GITHUB_WORKSPACE/task-definition-push.json"

      - name: Update Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.download-task-definition.outputs.task-definition }}
          container-name: threedollar-push-prod
          image: ${{ steps.build.outputs.image }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          cluster: threedollars-in-my-pocket-prod
          service: threedollars-in-my-pocket-push-prod
          wait-for-service-stability: true
