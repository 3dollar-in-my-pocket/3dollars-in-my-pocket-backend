name: 운영환경 - 롤백 - Vendor API

on:
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check assigned tag
        uses: actions/github-script@v3
        if: ${{GITHUB.REF_TYPE != 'tag'}}
        with:
          script: core.setFailed('You should deploy with tag (not branch !)')

      - name: validate semantic versioning
        uses: actions/github-script@v3
        if: ${{ !startsWith(GITHUB.REF_NAME, 'v') }}
        with:
          script: core.setFailed('tag is not semantic versioning ex) v0.0.1')

  rollback:
    runs-on: ubuntu-latest
    needs:
      - validate
    environment: prod-vendor
    steps:
      - name: checkout@v2
        uses: actions/checkout@v2

      - name: Version
        id: version
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "::set-output name=version::$VERSION"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Vendor API Image
        id: build
        env:
          DOCKER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DOCKER_REPOSITORY: 3dollar-api
          IMAGE_TAG: ${{ steps.version.outputs.version }}
        run: echo "::set-output name=image::$DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        id: download-task-definition
        run: |
          aws ecs describe-task-definition --task-definition threedollar-api-prod --query taskDefinition > task-definition-prod.json
          echo "::set-output name=task-definition::$GITHUB_WORKSPACE/task-definition-prod.json"

      - name: Update Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.download-task-definition.outputs.task-definition }}
          container-name: threedollar-api-prod
          image: ${{ steps.build.outputs.image }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          cluster: threedollar-prod
          service: threedollar-api-prod
          wait-for-service-stability: true
