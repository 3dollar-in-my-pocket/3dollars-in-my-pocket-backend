### [인증] 새로운 가게 정보를 등록합니다.
POST {{host_api}}/api/v2/store
Content-Type: application/json
Authorization: {{AUTHORIZATION}}

{
    "appearanceDays": [
        "MONDAY",
        "TUESDAY"
    ],
    "latitude": 33.0001,
    "longitude": 124,
    "menus": [
        {
            "category": "DALGONA",
            "name": "붕어빵 10개에 3000원",
            "price": "3000원"
        },
        {
            "category": "BUNGEOPPANG",
            "name": "",
            "price": ""
        },
        {
            "category": "TAKOYAKI",
            "name": "다코야키 10개에 3000원",
            "price": "3000원"
        }
    ],
    "paymentMethods": [
        "CASH"
    ],
    "storeName": "승호의 붕어빵",
    "storeType": "ROAD"
}

> {%
client.test("200 OK", function() {
    client.global.set("STORE_ID", response.body["data"]["storeId"])
    client.assert(response.status === 200, "응답 실패");
});
%}


### 특정 가게의 정보를 조회합니다. (v2.0)
GET {{host_api}}/api/v2/store/?storeId={{STORE_ID}}&latitude=34&longitude=124

> {%
client.test("200 OK", function() {
    client.assert(response.status === 200, "응답 실패");
});
%}

### 특정 가게의 정보를 조회합니다. (v2.1 방문 인증 기능 추가)
GET {{host_api}}/api/v2/store/?storeId={{STORE_ID}}&latitude=34&longitude=124&startDate=2021-10-10&endDate=2021-11-10

> {%
client.test("200 OK", function() {
    client.assert(response.status === 200, "응답 실패");
});
%}


### 위도, 경도 주위 가게 목록을 조회합니다.
GET {{host_api}}/api/v2/stores/near?latitude=33&longitude=124&mapLatitude=33&mapLongitude=124&distance=5000&category=DALGONA&orderType=REVIEW_DESC

> {%
client.test("200 OK", function() {
    client.assert(response.status === 200, "응답 실패");
});
%}


### [인증] 사용자가 작성한 가게의 정보를 조회합니다. (첫 스크롤)
GET {{host_api}}/api/v2/stores/me?size=2
Authorization: {{AUTHORIZATION}}

> {%
client.test("200 OK", function() {
    client.global.set("CURSOR", response.body["data"]["nextCursor"])
    client.assert(response.status === 200, "응답 실패");
});
%}


### [인증] 사용자가 작성한 가게의 정보를 조회합니다. (두번째 스크롤)
GET {{host_api}}/api/v2/stores/me?size=2&latitude=33.1&longitude=124.2&cursor={{CURSOR}}
Authorization: {{AUTHORIZATION}}

> {%
client.test("200 OK", function() {
    if (response.body["data"]["nextCursor"] !== null) {
        client.global.set("CURSOR", response.body["data"]["nextCursor"])
    }
    client.assert(response.status === 200, "응답 실패");
});
%}

### 거리순으로 특정 카테고리의 가게 정보를 조회합니다.
GET {{host_api}}/api/v2/stores/distance?size=5&page=0&latitude=33&longitude=124&mapLatitude=33&mapLongitude=124&category=BUNGEOPPANG

> {%
client.test("200 OK", function() {
    client.assert(response.status === 200, "응답 실패");
});
%}


### 리뷰순으로 특정 카테고리의 가게 정보를 조회합니다.
GET {{host_api}}/api/v2/stores/review?size=5&page=0&latitude=33&longitude=124&mapLatitude=33&mapLongitude=124&category=BUNGEOPPANG

> {%
client.test("200 OK", function() {
    client.assert(response.status === 200, "응답 실패");
});
%}


### [인증] 특정 가게의 정보를 수정합니다.
PUT {{host_api}}/api/v2/store/{{STORE_ID}}
Content-Type: application/json
Authorization: {{AUTHORIZATION}}

{
    "appearanceDays": [
        "WEDNESDAY",
        "SUNDAY"
    ],
    "latitude": 33.123,
    "longitude": 124.234,
    "menus": [
        {
            "category": "EOMUK",
            "name": "어묵",
            "price": "1000원"
        }
    ],
    "paymentMethods": [
        "CARD",
        "ACCOUNT_TRANSFER"
    ],
    "storeName": "승호의 붕어빵",
    "storeType": "ROAD"
}

> {%
client.test("200 OK", function() {
    client.assert(response.status === 200, "응답 실패");
});
%}


### [인증] 특정 가게의 정보를 삭제 요청합니다.
DELETE {{host_api}}/api/v2/store/{{STORE_ID}}?deleteReasonType=NOSTORE
Authorization: {{AUTHORIZATION}}

> {%
client.test("200 OK", function() {
    client.assert(response.status === 200, "응답 실패");
});
%}
