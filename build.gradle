buildscript {
    ext {
        springBootVersion = '2.3.8.RELEASE'
        kotlinVersion = '1.5.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

allprojects {
    group = 'com.potato'
}

subprojects {
    apply {
        plugin('java-library')
        plugin('eclipse')
        plugin('org.springframework.boot')
        plugin('io.spring.dependency-management')
        plugin('kotlin')
        plugin('kotlin-spring')
        plugin('kotlin-jpa')
        plugin('jacoco')
    }

    sourceCompatibility = '11'

    repositories {
        mavenCentral()
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-configuration-processor'

        testImplementation('org.springframework.boot:spring-boot-starter-test')

        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // kotlin
        implementation("org.jetbrains.kotlin:kotlin-stdlib")
        implementation("org.jetbrains.kotlin:kotlin-reflect")
        implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    test {
        useJUnitPlatform()
    }
}

def testProjects = [
    project(':threedollar-api'),
    project(':threedollar-domain'),
    project(':threedollar-common')
]

configure(testProjects) {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = '0.8.7'
    }

    jacocoTestReport {
        executionData(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))

        reports {
            html.enabled true
            xml.enabled true
            csv.enabled false
        }

        for (testProject in testProjects) {
            sourceSets(testProject.sourceSets["main"] as SourceSet)
        }
    }

}
