buildscript {
    ext {
        springBootVersion = "2.5.8"
        kotlinVersion = "1.5.32"
        springCloudVersion = "2020.0.4"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

allprojects {
    group = "com.depromeet.threedollar"
}

subprojects {
    apply {
        plugin("java-library")
        plugin("eclipse")
        plugin("org.springframework.boot")
        plugin("io.spring.dependency-management")
        plugin("kotlin")
        plugin("kotlin-spring")
    }

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    sourceCompatibility = "11"

    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
            freeCompilerArgs = ["-Xjsr305=strict"]
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
            freeCompilerArgs = ["-Xjsr305=strict"]
        }
    }

    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-validation")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        // Test
        testImplementation('org.springframework.boot:spring-boot-starter-test')

        // Lombok
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")

        // kotlin
        implementation("org.jetbrains.kotlin:kotlin-stdlib")
        implementation("org.jetbrains.kotlin:kotlin-reflect")
        implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    test {
        useJUnitPlatform()
    }

    sourceSets {
        integrationTest {
            java.srcDir "$projectDir/src/integrationTest/java" + "$projectDir/src/integrationTest/kotlin"
            resources.srcDir "$projectDir/src/integrationTest/resources"
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }

    configurations {
        integrationTestImplementation.extendsFrom implementation
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    }

    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        useJUnitPlatform()
    }

    check.dependsOn integrationTest
}

def testProjects = [
    // API Layer
    project(":threedollar-api-user"),
    project(":threedollar-api-boss"),
    project(":threedollar-admin"),
    project(":threedollar-api-core"),

    // Domain Layer
    project(":threedollar-domain"),
    project(":threedollar-document"),

    // Common Layer
    project(":threedollar-common")
]

configure(testProjects) {
    apply {
        plugin("jacoco")
    }

    jacoco {
        toolVersion = "0.8.7"
    }

    jacocoTestReport {
        executionData(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))

        reports {
            html.enabled true
            xml.enabled true
            csv.enabled false
        }

        for (testProject in testProjects) {
            sourceSets(testProject.sourceSets["main"] as SourceSet)
        }
    }

}
