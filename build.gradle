plugins {
    id 'org.springframework.boot' version '2.5.10'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.5.32'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.5.32'
    id 'application'
    id 'jacoco'
    id "org.sonarqube" version "3.3"
}

repositories {
    mavenCentral()
}

ext {
    springCloudVersion = "2020.0.4"
    swaggerVersion = "3.0.0"
    sentryVersion = "5.6.1"
    kotestVersion = "4.4.3"
}

allprojects {
    group = "com.depromeet.threedollar"
}

subprojects {
    apply {
        plugin("java-library")
        plugin("kotlin")
        plugin("org.springframework.boot")
        plugin("io.spring.dependency-management")
        plugin("org.jetbrains.kotlin.jvm")
        plugin("org.jetbrains.kotlin.plugin.spring")
        plugin("jacoco")
        plugin("java-test-fixtures")
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_11
            freeCompilerArgs = ["-Xjsr305=strict"]
        }
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-validation")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
        implementation("org.springframework.boot:spring-boot-starter-json")

        // Test
        testImplementation("org.springframework.boot:spring-boot-starter-test")

        // Lombok
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")

        // kotlin
        implementation("org.jetbrains.kotlin:kotlin-stdlib")
        implementation("org.jetbrains.kotlin:kotlin-reflect")
        implementation("com.fasterxml.jackson.module:jackson-module-kotlin")

        // kotest
        testImplementation("io.kotest:kotest-runner-junit5:$kotestVersion")
        testImplementation("io.kotest:kotest-extensions-spring:$kotestVersion")
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        integrationTestImplementation {
            extendsFrom implementation, testImplementation
        }
        integrationTestRuntimeOnly {
            extendsFrom testRuntimeOnly
        }
    }

    sourceSets {
        integrationTest {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            resources {
                "src/integrationTest/resources"
            }
        }
    }

    task integrationTest(type: Test, group: 'verification', description: 'Integration Tests') {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        useJUnitPlatform()
        jacoco {
            destinationFile = file("$buildDir/jacoco/integrationTest.exec")
        }
    }

    task unitTest(type: Test, group: 'verification', description: 'Unit Tests') {
        useJUnitPlatform()
        jacoco {
            destinationFile = file("$buildDir/jacoco/unitTest.exec")
        }
    }

    test {
        dependsOn unitTest
        dependsOn integrationTest
        finalizedBy jacocoTestReport
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "3dollar-in-my-pocket_3dollars-in-my-pocket-backend"
        property "sonar.organization", "3dollar-in-my-pocket"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/testCoverage/testCoverage.xml"
    }
}

jacoco {
    toolVersion = "0.8.7"
}

task testCoverage(type: JacocoReport, group: 'verification', description: 'Report Test Coverage') {
    executionData(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))

    subprojects.forEach {
        sourceSets(it.sourceSets.main as SourceSet)
    }

    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }
}
