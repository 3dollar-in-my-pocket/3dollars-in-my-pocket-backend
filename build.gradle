buildscript {
    ext {
        springBootVersion = "2.5.8"
        kotlinVersion = "1.5.32"
        springCloudVersion = "2020.0.4"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

allprojects {
    group = "com.depromeet.threedollar"
}

subprojects {
    apply {
        plugin("java-library")
        plugin("eclipse")
        plugin("org.springframework.boot")
        plugin("io.spring.dependency-management")
        plugin("kotlin")
        plugin("kotlin-spring")
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
            freeCompilerArgs = ["-Xjsr305=strict"]
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        integrationTestImplementation {
            extendsFrom implementation, testImplementation
        }
        integrationTestRuntimeOnly {
            extendsFrom testRuntimeOnly
        }
    }

    sourceSets {
        integrationTest {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            resources.srcDir "$projectDir/src/integrationTest/resources"
        }
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-validation")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        // Test
        testImplementation('org.springframework.boot:spring-boot-starter-test')

        // Lombok
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")

        // kotlin
        implementation("org.jetbrains.kotlin:kotlin-stdlib")
        implementation("org.jetbrains.kotlin:kotlin-reflect")
        implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    }

    task unitTest(type: Test, group: 'verification', description: 'Unit Tests') {
        useJUnitPlatform()
    }

    task integrationTest(type: Test, group: 'verification', description: 'Integration Tests') {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        useJUnitPlatform()
    }

    test {
        testClassesDirs += sourceSets.integrationTest.output.classesDirs
        classpath += sourceSets.integrationTest.runtimeClasspath
        useJUnitPlatform()
    }
}

def testProjects = [
    project(":threedollar-api-user"),
    project(":threedollar-api-core"),
    project(":threedollar-domain"),
    project(":threedollar-document"),
    project(":threedollar-common")
]

configure(testProjects) {
    apply {
        plugin("jacoco")
    }

    jacoco {
        toolVersion = "0.8.7"
    }

    jacocoTestReport {
        executionData(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))

        reports {
            html.enabled true
            xml.enabled true
            csv.enabled false
        }

        testProjects.forEach {
            sourceSets(it.sourceSets.main as SourceSet)
        }
    }
}
